import { ScrollView, Slider, TabWidget, Switch } from "std-widgets.slint";
import { TextBlock } from "types.slint";
import { Document, Viewport } from "state.slint";
import { Logic } from "logic.slint";

export component Panel inherits VerticalLayout {
    in property <string> title;
    out property <bool> collapsed: false;

    spacing: 8px;

    TouchArea {
        mouse-cursor: MouseCursor.pointer;

        HorizontalLayout {
            spacing: 8px;

            Text {
                horizontal-alignment: left;
                text: root.title;
                font-weight: 600;
            }

            Image {
                source: root.collapsed ? @image-url("assets/icons/chevron-down.svg") : @image-url("assets/icons/chevron-up.svg");
                width: 12px;
                height: 12px;
            }
        }

        clicked => {
            root.collapsed = !root.collapsed;
        }
    }

    Rectangle {
        height: root.collapsed ? 0px : self.preferred-height;
        visible: !root.collapsed;
        @children
    }
}

export component TextBlockItem inherits Rectangle {
    in property <TextBlock> text-block;
    in property <int> index;

    background: white;
    border-radius: 4px;
    border-width: 1px;
    border-color: #E0E0E0;

    HorizontalLayout {
        padding: 10px;
        spacing: 6px;
        alignment: start;

        Text {
            text: root.index;
            color: #666666;
            font-size: 11px;
            font-weight: 600;
            width: 15px;
            vertical-alignment: top;
        }

        Text {
            text: root.text-block.text.is-empty ? "<empty>" : root.text-block.text;
            color: #333333;
            font-size: 12px;
            vertical-alignment: top;
            wrap: word-wrap;
        }
    }
}

export component DetectionPanel inherits Panel {
    in-out property <float> confidence-threshold: 0.5;
    in-out property <float> nms-threshold: 0.4;

    title: "Detection";

    VerticalLayout {

        VerticalLayout {
            Text {
                text: "Confidence threshold";
            }

            Slider {
                minimum: 0.1;
                maximum: 1.0;
                step: 0.05;
                value <=> root.confidence-threshold;
            }
        }

        VerticalLayout {
            Text {
                text: "NMS threshold";
            }

            Slider {
                minimum: 0.1;
                maximum: 1.0;
                step: 0.05;
                value <=> root.nms-threshold;
            }
        }

        HorizontalLayout {
            spacing: 8px;
            alignment: center;

            TouchArea {
                width: 80px;
                height: 40px;
                mouse-cursor: MouseCursor.pointer;

                detect-btn := Rectangle {
                    width: parent.width;
                    height: parent.height;
                    background: white;
                    border-radius: 6px;
                    border-width: 1px;
                    border-color: #E0E0E0;

                    Text {
                        text: "Detect";
                        color: #333333;
                        font-size: 16px;
                        font-weight: 400;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                    }
                }

                states [
                    hover when self.has-hover: {
                        detect-btn.background: #F5F5F5;
                    }
                ]

                clicked => {
                    if (Document.image.height > 0) {
                        Viewport.in-progress = true;
                        Logic.detect(Document.image);
                    }
                }
            }

            TouchArea {
                width: 80px;
                height: 40px;
                mouse-cursor: MouseCursor.pointer;

                btn := Rectangle {
                    width: parent.width;
                    height: parent.height;
                    background: white;
                    border-radius: 6px;
                    border-width: 1px;
                    border-color: #E0E0E0;

                    Text {
                        text: "OCR";
                        color: #333333;
                        font-size: 16px;
                        font-weight: 400;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                    }
                }

                states [
                    hover when self.has-hover: {
                        btn.background: #F5F5F5;
                    }
                ]

                clicked => {
                    Viewport.in-progress = true;
                    Logic.ocr(Document.image, Document.text-blocks);
                }
            }
        }
    }
}

export component InpaintingPanel inherits Panel {
    title: "Inpainting";

    VerticalLayout {
        Switch {
            text: "Show segmentation mask";
            checked <=> Viewport.show-segmentation;
        }
    }
}

export component Panels inherits Rectangle {
    property <[TextBlock]> text-blocks: Document.text-blocks;

    min-width: 250px;
    max-width: 400px;
    background: #FAFAFA;
    border-width: 1px;
    border-color: #E0E0E0;

    VerticalLayout {
        padding: 8px;
        spacing: 8px;

        DetectionPanel { }

        InpaintingPanel { }

        ScrollView {
            VerticalLayout {
                spacing: 4px;
                alignment: start;

                if root.text-blocks.length == 0: Text {
                    text: "No text blocks detected yet.";
                    color: #666666;
                    font-size: 12px;
                    horizontal-alignment: center;
                }

                for block[index] in root.text-blocks: TextBlockItem {
                    text-block: block;
                    index: index + 1;
                }
            }
        }
    }
}
